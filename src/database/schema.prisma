generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Timezone {
  id            Int     @id @default(autoincrement())
  zoneName      String
  gmtOffset     Int
  gmtOffsetName String
  abbreviation  String
  tzName        String
  country       Country @relation(fields: [countryId], references: [id])
  countryId     Int
}


model City {
  id           Int            @id @default(autoincrement())
  name         String
  latitude     Float
  longitude    Float
  position     Json           @default("{}")
  state        State          @relation(fields: [stateId], references: [id])
  stateId      Int
  country      Country        @relation(fields: [countryId], references: [id])
  countryId    Int
  organizations Organization[]
  projects      Project[]

  @@unique([stateId, name])
}

model State {
  id         Int     @id @default(autoincrement())
  name       String
  state_code String 
  latitude   Float
  longitude  Float
  position   Json    @default("{}")
  type       String?
  cities     City[]
  countryId  Int
  country    Country @relation(fields: [countryId], references: [id])

  @@unique([countryId, name])
}

model Country {
  id              Int            @id @default(autoincrement())
  name            String         @unique
  iso3            String
  iso2            String
  numeric_code    String
  phone_code      String         
  capital         String
  currency        String
  currency_name   String
  currency_symbol String
  tld             String
  native          String
  region          String
  subregion       String
  latitude        Float
  longitude       Float
  position        Json           @default("{}")
  emoji           String
  emojiU          String
  flag            Boolean        @default(false)
  states          State[]
  timezones       Timezone[]
  cities          City[]
  organizations   Organization[]
  worldPopulation WorldPopulation[]
}

model Organization {
  organizationId String    @id @default(uuid())
  email          String    @unique
  password       String
  name           String
  phone          String
  countryId      Int
  country        Country?  @relation(fields: [countryId], references: [id])
  cityId         Int
  City           City?     @relation(fields: [cityId], references: [id])
  OrgUser        OrgUser[]
  Project        Project[]

  @@map(name: "organizations")
}

model OrgUser {
  userId         String        @id @default(uuid())
  email          String        @unique
  password       String
  name           String
  phone          String
  nickName       String
  organizationId String
  Organization   Organization? @relation(fields: [organizationId], references: [organizationId])
  Project        Project[]
  Photo          Photo[]
  Video          Video[]
  Audio          Audio[]

  @@map(name: "organizationUsers")
}

model Project {
  projectId       String            @id @default(uuid())
  email           String
  name            String
  phone           String
  dateRegistered  String
  organizationId  String
  Organization    Organization?     @relation(fields: [organizationId], references: [organizationId])
  Photo           Photo[]
  Video           Video[]
  Audio           Audio[]
  City            City?             @relation(fields: [cityId], references: [id])
  cityId          Int
  userId          String
  OrgUser         OrgUser?          @relation(fields: [userId], references: [userId])
  ProjectPosition ProjectPosition[]

  @@map(name: "projects")
}

model ProjectPosition {
  projectPositionId String   @id @default(uuid())
  name              String?
  dateRegistered    String
  projectId         String
  Project           Project? @relation(fields: [projectId], references: [projectId])
  latitude          Float
  longitude         Float
  position          Json     @default("{}")

  @@map(name: "projectPositions")
}

model Photo {
  photoId   String   @id @default(uuid())
  caption   String
  latitude  Float
  longitude Float
  date      String
  position  Json     @default("{}")
  projectId String
  Project   Project? @relation(fields: [projectId], references: [projectId])
  userId    String
  OrgUser   OrgUser? @relation(fields: [userId], references: [userId])

  @@map(name: "photos")
}

model Video {
  videoId   String   @id @default(uuid())
  caption   String
  latitude  Float
  longitude Float
  date      String
  position  Json     @default("{}")
  projectId String
  Project   Project? @relation(fields: [projectId], references: [projectId])
  userId    String
  OrgUser   OrgUser? @relation(fields: [userId], references: [userId])

  @@map(name: "videos")
}

model Audio {
  audioId   String   @id @default(uuid())
  caption   String
  latitude  Float
  longitude Float
  date      String
  position  Json     @default("{}")
  projectId String
  Project   Project? @relation(fields: [projectId], references: [projectId])
  userId    String
  OrgUser   OrgUser? @relation(fields: [userId], references: [userId])

  @@map(name: "audios")
}

model WorldPopulation {
  id        Int      @id @default(autoincrement())
  countryName   String   @unique
  code      String
  indicator String
  indicatorCode String
  countryId      Int?
  country        Country?  @relation(fields: [countryId], references: [id])
  population1960 BigInt?
  population1961 BigInt?
  population1962 BigInt?
  population1963 BigInt?
  population1964 BigInt?
  population1965 BigInt?
  population1966 BigInt?
  population1967 BigInt?
  population1968 BigInt?
  population1969 BigInt?
  population1970 BigInt?
  population1971 BigInt?
  population1972 BigInt?
  population1973 BigInt?
  population1974 BigInt?
  population1975 BigInt?
  population1976 BigInt?
  population1977 BigInt?
  population1978 BigInt?
  population1979 BigInt?
  population1980 BigInt?
  population1981 BigInt?
  population1982 BigInt?
  population1983 BigInt?
  population1984 BigInt?
  population1985 BigInt?
  population1986 BigInt?
  population1987 BigInt?
  population1988 BigInt?
  population1989 BigInt?
  population1990 BigInt?
  population1991 BigInt?
  population1992 BigInt?
  population1993 BigInt?
  population1994 BigInt?
  population1995 BigInt?
  population1996 BigInt?
  population1997 BigInt?
  population1998 BigInt?
  population1999 BigInt?
  population2000 BigInt?
  population2001 BigInt?
  population2002 BigInt?
  population2003 BigInt?
  population2004 BigInt?
  population2005 BigInt?
  population2006 BigInt?
  population2007 BigInt?
  population2008 BigInt?
  population2009 BigInt?
  population2010 BigInt?
  population2011 BigInt?
  population2012 BigInt?
  population2013 BigInt?
  population2014 BigInt?
  population2015 BigInt?
  population2016 BigInt?
  population2017 BigInt?
  population2018 BigInt?
  population2019 BigInt?
  population2020 BigInt?
  population2021 BigInt?
  population2022 BigInt?

}
